{-# START_FILE {{ name }}.cabal #-}
-- This file has been generated from package.yaml by hpack version 0.9.0.
--
-- see: https://github.com/sol/hpack

name:           {{ name }}
version:        0.1.0
synopsis:       A new haskell project.
description:    {{ name }} is a new haskell project.
category:       Other
homepage:       https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{ name }}#readme
bug-reports:    https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{ name }}/issues
maintainer:     {{author-name}}{{^author-name}}Author name here{{/author-name}}
license:        MIT
build-type:     Simple
cabal-version:  >= 1.10

extra-source-files:
    CHANGELOG.md
    LICENSE.md
    package.yaml
    README.md
    stack.yaml

source-repository head
  type: git
  location: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{ name }}

library
  hs-source-dirs:
      src
  ghc-options: -Wall
  build-depends:
      base
  exposed-modules:
      Example
  default-language: Haskell2010

executable {{ name }}
  main-is: Main.hs
  hs-source-dirs:
      app
  ghc-options: -Wall -rtsopts -threaded -with-rtsopts=-N
  build-depends:
      base
    , {{ name }}
  default-language: Haskell2010

test-suite {{ name }}-test-suite
  type: exitcode-stdio-1.0
  hs-source-dirs:
      test
  main-is: Main.hs
  build-depends:
      base
    , {{ name }}
    , HUnit
    , QuickCheck
    , tasty
    , tasty-hunit
    , tasty-quickcheck
  other-modules:
      ExampleSpec
  ghc-options: -Wall -rtsopts -threaded -with-rtsopts=-N
  default-language: Haskell2010

benchmark {{ name }}-benchmarks
  type: exitcode-stdio-1.0
  main-is: Main.hs
  hs-source-dirs:
      benchmark
  ghc-options: -Wall -rtsopts -threaded -with-rtsopts=-N
  build-depends:
      base
    , {{ name }}
    , criterion
  default-language: Haskell2010

{-# START_FILE package.yaml #-}
# This YAML file describes your package. Stack will automatically generate a
# Cabal file when you run `stack build`. See the hpack website for help with
# this file: <https://github.com/sol/hpack>.
name: {{ name }}
synopsis: A new haskell project.
description: {{ name }} is a new haskell project.
version: '0.1.0'
category: Other
maintainer: {{author-name}}{{^author-name}}Author name here{{/author-name}}
github: {{github-username}}{{^github-username}}githubuser{{/github-username}}/{{ name }}
license: MIT
library:
  source-dirs: src
  dependencies:
  - base

extra-source-files:
- CHANGELOG.md
- LICENSE.md
- package.yaml
- README.md
- stack.yaml

ghc-options: -Wall

executables:
  {{ name }}:
    source-dirs: app
    main: Main.hs
    dependencies:
    - base
    - {{ name }}
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

tests:
  {{ name }}-test-suite:
    source-dirs: test
    main: Main.hs
    dependencies:
    - base
    - {{ name }}
    - HUnit
    - QuickCheck
    - tasty
    - tasty-hunit
    - tasty-quickcheck
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

benchmarks:
  {{ name }}-benchmarks:
    source-dirs: benchmark
    main: Main.hs
    dependencies:
    - base
    - {{ name }}
    - criterion
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

{-# START_FILE .gitignore #-}
# Stack uses this directory as scratch space.
/.stack-work/
# Stack generates the Cabal file from `package.yaml` through hpack.
/*.cabal

{-# START_FILE CHANGELOG.md #-}
# Change log

{{ name }} uses [Semantic Versioning][].
The change log is available through the [releases on GitHub][].

[Semantic Versioning]: http://semver.org/spec/v2.0.0.html
[releases on GitHub]: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{ name }}/releases

{-# START_FILE LICENSE.md #-}
[The MIT License (MIT)][]

Copyright (c) {{year}}{{^year}}2017{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

[The MIT License (MIT)]: https://opensource.org/licenses/MIT

{-# START_FILE README.md #-}
# [{{ name }}][]

- WIP -

{-# START_FILE Setup.hs #-}
-- This script is used to build and install your package. Typically you don't
-- need to change it. The Cabal documentation has more information about this
-- file: <https://www.haskell.org/cabal/users-guide/installing-packages.html>.
import qualified Distribution.Simple

main :: IO ()
main = Distribution.Simple.defaultMain

{-# START_FILE benchmark/Main.hs #-}
-- You can benchmark your code quickly and effectively with Criterion. See its
-- website for help: <http://www.serpentine.com/criterion/>.
import Criterion.Main

main :: IO ()
main = defaultMain [bench "const" (whnf const ())]

{-# START_FILE app/Main.hs #-}
import qualified Example

main :: IO ()
main = print Example.example

{-# START_FILE src/Example.hs #-}
module Example (example) where

example :: Bool
example = True

{-# START_FILE test/Main.hs #-}
module Main where

import Test.Tasty (defaultMain, testGroup)

import ExampleSpec

main :: IO ()
main = defaultMain $ testGroup "Tests" [ ExampleSpec.tests ]

{-# START_FILE test/ExampleSpec.hs #-}
module ExampleSpec (tests) where

import Test.Tasty (TestTree, testGroup)
import Test.Tasty.HUnit (testCase, (@?=))

import Example

tests :: TestTree
tests =
  testGroup "Example" [ exampleTests  ]

exampleTests :: TestTree
exampleTests = testGroup "test"
  [ testCase "will pass" $ example @?= True ]
